using System;
using System.Drawing;
using System.Windows.Forms;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Numerics;
using System.Drawing.Text;

namespace MistsOfThelema
{
    /// <summary>
    /// Represents the main game form for a single day's gameplay.
    /// It manages player movement, collisions, interactions, dialogs, and item pickups.
    /// </summary>
    public partial class NextDay : Form
    {
        // UI controls for displaying information to the player.
        private Label interactLabel;
        private Label dialogLabel;
        private Label playInventory;

        // Picture boxes for visual elements like the background and dialog box.
        private PictureBox pictureBox1;
        private PictureBox dialogBox;

        // Timers for game logic, such as collision checks, dialog display, and end-of-day events.
        private Timer collisionTimer;
        private Timer afterDialogTimer;
        private Timer endOfDayTimer;

        // Game entities the player can interact with.
        private Npc npc1;
        private Npc weirdMan;
        private Npc shopkeeper;

        // An interactable object representing the player's house, which ends the day.
        private Houses playerExitHouse;

        // The player character object.
        private CPlayer cPlayer1;

        // Lists to manage game state and interactive elements.
        private List<string> talkedToList = new List<string>();
        private List<Button> choiceButtons = new List<Button>();
        private List<IInteractable> interactables;

        // List to hold all interactive/blocking assets for collision checks.
        private List<Control> allAssets;

        // An instance of the DialogLoader to handle dialog data.
        private DialogLoader diaLoad;

        // A container for components, required by the designer.
        private System.ComponentModel.IContainer components;

        // A flag to indicate if the player is currently in a conversation.
        private bool isInConversation = false;

        /// <summary>
        /// Initializes a new instance of the NextDay form.
        /// </summary>
        /// <param name="player">The CPlayer object representing the player, passed from a previous scene.</param>
        public NextDay(CPlayer player)
        {
            
            this.cPlayer1 = player;

            // InitializeComponent() will now set properties on the EXISTING cPlayer1 object,
            // instead of creating a new one.
            InitializeComponent();

            // --- Step 1: Initialize the DialogLoader. ---
            diaLoad = new DialogLoader();

            // --- Step 2: Subscribe to the DialogsLoaded event. ---
            // This sets up a callback to handle the result of the asynchronous loading.
            diaLoad.DialogsLoaded += OnDialogsLoaded;

            // --- Step 3: Start the asynchronous loading of dialogs. ---
            // The method is awaited by a discard variable ('_') to run it in the background without blocking the constructor.
            string dialogFile = $"resources\\dialog\\day{GameManager.CurrentDay}.json";
            _ = diaLoad.LoadDialogsFromJsonAsync(dialogFile);

            // Initialize the list of interactable objects.
            InitializeInteractables();

            // Initialize the list of all assets for placement and collision checks.
            allAssets = new List<Control>
            {
                cPlayer1, npc1, weirdMan, shopkeeper, playerExitHouse
            };

            // Initialize lists for dialog choices and tracking NPCs already talked to.
            choiceButtons = new List<Button>();
            talkedToList = new List<string>();

            // Initialize and configure timers.
            afterDialogTimer = new Timer();
            afterDialogTimer.Interval = 2000;
            afterDialogTimer.Tick += DialogTimer_Tick;

            endOfDayTimer = new Timer();
            endOfDayTimer.Interval = 300000; // 5 minutes in milliseconds
            endOfDayTimer.Tick += EndOfDay_Tick;
            endOfDayTimer.Start();

            // Set instance names for interactable objects.
            npc1.InstanceName = "Theo";
            weirdMan.InstanceName = "Weird man";
            playerExitHouse.InstanceName = "Your House";
            shopkeeper.InstanceName = "Shopkeeper";

            // Place a random item on the map at the start of the day.
            PlaceRandomItem();

            // Update the inventory display.
            UpdateInventoryList();

            // Subscribe to the FormClosing event to stop timers.
            this.FormClosing += NextDay_FormClosing;
        }

        /// <summary>
        /// A method generated by the Windows Forms designer to initialize the form's controls.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(NextDay));
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            this.interactLabel = new System.Windows.Forms.Label();
            this.collisionTimer = new System.Windows.Forms.Timer(this.components);
            this.dialogLabel = new System.Windows.Forms.Label();
            this.dialogBox = new System.Windows.Forms.PictureBox();
            this.afterDialogTimer = new System.Windows.Forms.Timer(this.components);
            this.endOfDayTimer = new System.Windows.Forms.Timer(this.components);
            this.playInventory = new System.Windows.Forms.Label();
            this.shopkeeper = new MistsOfThelema.Npc();
            this.weirdMan = new MistsOfThelema.Npc();
            this.npc1 = new MistsOfThelema.Npc();
            this.playerExitHouse = new MistsOfThelema.Houses();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialogBox)).BeginInit();
            this.SuspendLayout();
            //
            // pictureBox1
            //
            this.pictureBox1.BackColor = System.Drawing.Color.Black;
            this.pictureBox1.InitialImage = global::MistsOfThelema.Properties.Resources.defPlayer;
            this.pictureBox1.Location = new System.Drawing.Point(194, 322);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(94, 130);
            this.pictureBox1.TabIndex = 1;
            this.pictureBox1.TabStop = false;
            //
            // interactLabel
            //
            this.interactLabel.AutoSize = true;
            this.interactLabel.BackColor = System.Drawing.SystemColors.ActiveCaptionText;
            this.interactLabel.Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
            this.interactLabel.ForeColor = System.Drawing.SystemColors.Control;
            this.interactLabel.Location = new System.Drawing.Point(526, 854);
            this.interactLabel.Name = "interactLabel";
            this.interactLabel.Size = new System.Drawing.Size(348, 18);
            this.interactLabel.TabIndex = 6;
            this.interactLabel.Text = "Interact with ------ by pressing E";
            this.interactLabel.Visible = false;
            //
            // collisionTimer
            //
            this.collisionTimer.Enabled = true;
            this.collisionTimer.Interval = 50;
            this.collisionTimer.Tick += new System.EventHandler(this.CollisionTimer_Tick);
            //
            // dialogLabel
            //
            this.dialogLabel.AutoSize = true;
            this.dialogLabel.BackColor = System.Drawing.Color.SeaGreen;
            this.dialogLabel.Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
            this.dialogLabel.ForeColor = System.Drawing.SystemColors.ButtonHighlight;
            this.dialogLabel.Location = new System.Drawing.Point(227, 889);
            this.dialogLabel.Name = "dialogLabel";
            this.dialogLabel.Size = new System.Drawing.Size(118, 18);
            this.dialogLabel.TabIndex = 9;
            this.dialogLabel.Text = "dialogLabel";
            this.dialogLabel.Visible = false;
            //
            // dialogBox
            //
            this.dialogBox.BackColor = System.Drawing.Color.Black;
            this.dialogBox.Location = new System.Drawing.Point(-5, 875);
            this.dialogBox.Name = "dialogBox";
            this.dialogBox.Size = new System.Drawing.Size(1439, 227);
            this.dialogBox.TabIndex = 11;
            this.dialogBox.TabStop = false;
            this.dialogBox.Visible = false;
            //
            // afterDialogTimer
            //
            this.afterDialogTimer.Enabled = true;
            this.afterDialogTimer.Interval = 2000;
            this.afterDialogTimer.Tick += new System.EventHandler(this.DialogTimer_Tick);
            //
            // endOfDayTimer
            //
            this.endOfDayTimer.Enabled = true;
            this.endOfDayTimer.Interval = 300000;
            this.endOfDayTimer.Tick += new System.EventHandler(this.EndOfDay_Tick);
            //
            // playInventory
            //
            this.playInventory.AutoSize = true;
            this.playInventory.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(192)))), ((int)(((byte)(0)))));
            this.playInventory.Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
            this.playInventory.Location = new System.Drawing.Point(696, 152);
            this.playInventory.Name = "playInventory";
            this.playInventory.Size = new System.Drawing.Size(178, 18);
            this.playInventory.TabIndex = 14;
            this.playInventory.Text = "PLAYER INVENTORY:";
            this.playInventory.Click += new System.EventHandler(this.PlayInventory_Click);
            this.playInventory.Visible = false;
            //
            // shopkeeper
            //
            this.shopkeeper.BackColor = System.Drawing.Color.Transparent;
            this.shopkeeper.InstanceName = "Shopkeeper";
            this.shopkeeper.Location = new System.Drawing.Point(602, 703);
            this.shopkeeper.Name = "shopkeeper";
            this.shopkeeper.Size = new System.Drawing.Size(70, 88);
            this.shopkeeper.TabIndex = 13;
            //
            // weirdMan
            //
            this.weirdMan.BackColor = System.Drawing.Color.Transparent;
            this.weirdMan.InstanceName = null;
            this.weirdMan.Location = new System.Drawing.Point(207, 364);
            this.weirdMan.Name = "weirdMan";
            this.weirdMan.Size = new System.Drawing.Size(70, 88);
            this.weirdMan.TabIndex = 12;
            //
            // cPlayer1
            //
            this.cPlayer1.BackColor = System.Drawing.Color.Transparent;
            this.cPlayer1.Location = new System.Drawing.Point(1180, 400);
            this.cPlayer1.Name = "cPlayer1";
            this.cPlayer1.Size = new System.Drawing.Size(61, 86);
            this.cPlayer1.TabIndex = 0;
            this.cPlayer1.KeyDown += new System.Windows.Forms.KeyEventHandler(this.OnKeyDown);
            this.cPlayer1.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.OnKeyPress);
            this.cPlayer1.KeyUp += new System.Windows.Forms.KeyEventHandler(this.OnKeyUp);
            //
            // npc1
            //
            this.npc1.BackColor = System.Drawing.Color.Transparent;
            this.npc1.InstanceName = "Theo";
            this.npc1.Location = new System.Drawing.Point(986, 523);
            this.npc1.Name = "npc1";
            this.npc1.Size = new System.Drawing.Size(70, 88);
            this.npc1.TabIndex = 4;
            //
            // playerExitHouse
            //
            this.playerExitHouse.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink;
            this.playerExitHouse.BackColor = System.Drawing.Color.Transparent;
            this.playerExitHouse.InstanceName = "Your House";
            this.playerExitHouse.Location = new System.Drawing.Point(1131, 292);
            this.playerExitHouse.Name = "playerExitHouse";
            this.playerExitHouse.Size = new System.Drawing.Size(225, 109);
            this.playerExitHouse.TabIndex = 5;
            //
            // SecondDay
            //
            this.BackColor = System.Drawing.SystemColors.ActiveBorder;
            this.BackgroundImage = global::MistsOfThelema.Properties.Resources.townProto;
            this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Center;
            this.ClientSize = new System.Drawing.Size(1424, 1041);
            this.Controls.Add(this.playInventory);
            this.Controls.Add(this.shopkeeper);
            this.Controls.Add(this.weirdMan);
            this.Controls.Add(this.dialogLabel);
            this.Controls.Add(this.interactLabel);
            this.Controls.Add(this.cPlayer1);
            this.Controls.Add(this.npc1);
            this.Controls.Add(this.pictureBox1);
            this.Controls.Add(this.playerExitHouse);
            this.Controls.Add(this.dialogBox);
            this.Cursor = System.Windows.Forms.Cursors.Cross;
            this.DoubleBuffered = true;
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximumSize = new System.Drawing.Size(1440, 1080);
            this.MinimumSize = new System.Drawing.Size(1440, 1038);
            this.Name = "SecondDay";
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialogBox)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        // --- Step 4: Method to handle the DialogsLoaded event. ---
        /// <summary>
        /// This callback method is executed when the dialog loading is complete.
        /// It handles the result (success or failure) and updates the UI accordingly.
        /// </summary>
        /// <param name="success">True if dialogs were loaded successfully, false otherwise.</param>
        /// <param name="errorMessage">An error message if loading failed.</param>
        private void OnDialogsLoaded(bool success, string errorMessage)
        {
            // Check if this method is being called from a different thread (e.g., the ThreadPool).
            // If so, it uses Invoke to marshal the call back to the UI thread, which is necessary
            // for updating UI components safely.
            if (this.InvokeRequired)
            {
                this.Invoke(new DialogLoader.DialogsLoadedEventHandler(OnDialogsLoaded), new object[] { success, errorMessage });
                return;
            }

            if (success)
            {
                // You can show a success message if needed, but it's commented out to keep the UI clean.
                // MessageBox.Show("Dialogs were successfully loaded!", "Loading Complete", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                // Display an error message and exit the application if dialog loading fails.
                MessageBox.Show($"Dialog Error: {errorMessage}\nError Loading Dialog", "Dialog Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
            }
        }

        /// <summary>
        /// Initializes the list of interactable game objects.
        /// </summary>
        private void InitializeInteractables()
        {
            interactables = new List<IInteractable>
            {
                playerExitHouse,
                npc1,
                weirdMan,
                shopkeeper
            };
        }

        /// <summary>
        /// Places a random pickup item on the map in a location that doesn't collide with existing assets.
        /// </summary>
        private void PlaceRandomItem()
        {
            Random rand = new Random();
            int maxAttempts = 100;
            int currentAttempt = 0;

            // Define the boundaries for random placement based on the form's client area.
            int minX = cPlayer1.borderCoord[0];
            int maxX = cPlayer1.borderCoord[1];
            int minY = cPlayer1.borderCoord[2];
            int maxY = cPlayer1.borderCoord[3];

            while (currentAttempt < maxAttempts)
            {
                // Generate random coordinates within the defined bounds.
                int randomX = rand.Next(minX, maxX - 50); // Subtract size to prevent going off-screen
                int randomY = rand.Next(minY, maxY - 50); // Subtract size to prevent going off-screen

                // Create a temporary rectangle for the item at the proposed random position.
                Rectangle proposedBounds = new Rectangle(randomX, randomY, 50, 50); // You can adjust the size

                // Check for collision with all existing assets.
                if (!CheckCollisionForPlacement(proposedBounds, allAssets))
                {
                    // A safe position was found!
                    ItemPickup newItemPickup = new ItemPickup();


                    newItemPickup.Item = new Coin("Coin", "A shiny gold coin.", 1, 10, 1);
                    newItemPickup.Image = Properties.Resources.coin; // Assign image for coin
                    

                    // Set the item's location and properties, then add it to the form's controls.
                    newItemPickup.Location = new Point(randomX, randomY);
                    newItemPickup.Size = new Size(50, 50); // Set a consistent size
                    newItemPickup.Name = "ItemPickup";
                    newItemPickup.Click += ItemPickup_Click; // Subscribe to the Click event
                    this.Controls.Add(newItemPickup);
                    interactables.Add(newItemPickup); // Add the new item to interactables list
                    newItemPickup.BringToFront();
                    return; // Exit the method after placing the item.
                }

                currentAttempt++;
            }

            // If the loop finishes, no safe spot was found after max attempts.
            MessageBox.Show("Could not find a place for the item.", "Placement Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }

        /// <summary>
        /// Checks if a proposed rectangle for a new asset intersects with any existing controls.
        /// </summary>
        /// <param name="proposedBounds">The bounding rectangle of the new asset.</param>
        /// <param name="assets">A list of existing controls on the form.</param>
        /// <returns>True if a collision is detected, otherwise false.</returns>
        private bool CheckCollisionForPlacement(Rectangle proposedBounds, List<Control> assets)
        {
            foreach (Control asset in assets)
            {
                // Expanded bounds for assets to give some clearance space.
                Rectangle expandedAssetBounds = ExpandBoundsByRadius(asset.Bounds, 50);
                if (proposedBounds.IntersectsWith(expandedAssetBounds))
                {
                    return true; // Collision detected.
                }
            }
            return false; // No collision.
        }

        /// <summary>
        /// Handles the event when an item pickup is clicked by the player.
        /// </summary>
        private void ItemPickup_Click(object sender, EventArgs e)
        {
            ItemPickup clickedItem = sender as ItemPickup;
            if (clickedItem != null)
            {
                // You can add logic to only pick up the item if the player is close.
                // For now, it adds it directly on click.
                AddItemToPlayer(clickedItem.Item);

                // Show a message to the player.
                dialogLabel.Visible = true;
                dialogBox.Visible = true;
                dialogLabel.Text = $"You picked up a {clickedItem.Item.Name}!";
                afterDialogTimer.Start();

                // Remove the item from the form and the interactables list.
                this.Controls.Remove(clickedItem);
                interactables.Remove(clickedItem);

                // Dispose of the control to free up resources.
                clickedItem.Dispose();
            }
        }

        //player movement and interaction
        /// <summary>
        /// Handles key presses for player movement and interaction.
        /// </summary>
        private void OnKeyDown(object sender, KeyEventArgs e)
        {
            // Ignore input if the player is in a conversation.
            if (isInConversation) return;

            // Set movement flags based on the key pressed.
            if (e.KeyCode == Core.KeyUp)
                Core.IsUp = true;
            if (e.KeyCode == Core.KeyDown)
                Core.IsDown = true;
            if (e.KeyCode == Core.KeyLeft)
                Core.IsLeft = true;
            if (e.KeyCode == Core.KeyRight)
                Core.IsRight = true;

            // Handle the 'Interact' key press.
            if (e.KeyCode == Core.Interact)
            {
                Core.IsInteracting = true;
                HandleInteraction(cPlayer1);
            }

            // Handle the 'Inventory' key press.
            if (e.KeyCode == Core.Inventory)
            {
                playInventory.Visible = true;
            }
        }

        /// <summary>
        /// Handles key releases to stop player movement.
        /// </summary>
        private void OnKeyUp(object sender, KeyEventArgs e)
        {
            // Ignore input if the player is in a conversation.
            if (isInConversation) return;

            // Reset movement flags when keys are released.
            if (e.KeyCode == Core.KeyUp)
                Core.IsUp = false;
            if (e.KeyCode == Core.KeyDown)
                Core.IsDown = false;
            if (e.KeyCode == Core.KeyLeft)
                Core.IsLeft = false;
            if (e.KeyCode == Core.KeyRight)
                Core.IsRight = false;

            // Reset the interaction flag.
            if (e.KeyCode == Core.Interact)
            {
                Core.IsInteracting = false;
            }
        }

        // This method is available but not used in the provided code.
        private void OnKeyPress(object sender, KeyPressEventArgs e)
        {
        }

        /// <summary>
        /// Checks for collisions between the player and interactable objects.
        /// It updates the on-screen interaction prompt if a collision is detected.
        /// </summary>
        private void CheckCollision()
        {
            bool collision = false;

            // Iterate through all interactable objects to check for proximity with the player.
            foreach (var interactable in interactables)
            {
                Rectangle playerBounds = cPlayer1.GetBounds();
                Rectangle interactableBounds = interactable.GetBounds();

                // Expands the interactable's bounds to create a "trigger radius" so the player doesn't
                // have to be directly on top of the object to interact.
                Rectangle expandedBounds = ExpandBoundsByRadius(interactableBounds, 30);

                if (playerBounds.IntersectsWith(expandedBounds))
                {
                    interactLabel.Visible = true;

                    // Display a specific message for the player's house.
                    if (interactable.InstanceName == "Your House")
                    {
                        interactLabel.Text = $"Press E to END THE DAY by entering {interactable.InstanceName}";
                    }
                    // Display a message for a pickup item.
                    else if (interactable is ItemPickup)
                    {
                        interactLabel.Text = $"Press E to pick up {((ItemPickup)interactable).Item.Name}";
                    }
                    // Display a generic message for other interactables.
                    else
                    {
                        interactLabel.Text = $"Press E to interact with {interactable.InstanceName}";
                    }

                    collision = true;
                    break; // Exit the loop as soon as a collision is found.
                }
            }
            if (!collision)
            {
                // Hide the label if no collision is detected.
                interactLabel.Visible = false;
            }
        }

        /// <summary>
        /// Expands a rectangle's bounds by a specified radius.
        /// </summary>
        /// <param name="bounds">The original rectangle.</param>
        /// <param name="radius">The amount to expand the bounds by on all sides.</param>
        /// <returns>A new, expanded rectangle.</returns>
        private Rectangle ExpandBoundsByRadius(Rectangle bounds, int radius)
        {
            return new Rectangle(
                bounds.X - radius,
                bounds.Y - radius,
                bounds.Width + 2 * radius,
                bounds.Height + 2 * radius
            );
        }

        /// <summary>
        /// Handles the logic when the player presses the 'Interact' key (E).
        /// </summary>
        /// <param name="player">The player character.</param>
        private void HandleInteraction(CPlayer player)
        {
            // Use .ToList() to iterate over a copy of the list, preventing errors if items are removed.
            foreach (var interactable in interactables.ToList())
            {
                Rectangle playerBounds = cPlayer1.GetBounds();
                Rectangle interactableBounds = interactable.GetBounds();

                Rectangle expandedBounds = ExpandBoundsByRadius(interactableBounds, 50);

                // Check for pickup items first.
                if (playerBounds.IntersectsWith(expandedBounds) && interactable is ItemPickup)
                {
                    ItemPickup itemPickup = (ItemPickup)interactable;
                    AddItemToPlayer(itemPickup.Item);

                    dialogLabel.Visible = true;
                    dialogBox.Visible = true;
                    dialogLabel.Text = $"You picked up a {itemPickup.Item.Name}!";
                    afterDialogTimer.Start();

                    // Remove the item from the form and the interactables list.
                    this.Controls.Remove(itemPickup);
                    interactables.Remove(itemPickup);
                    itemPickup.Dispose();
                    return; // Exit the method to prevent further interaction.
                }

                // Handle interaction with the player's house.
                if (playerBounds.IntersectsWith(expandedBounds) && interactable.InstanceName == "Your House")
                {
                    TransitionToEndOfDay();
                    break;
                }

                // Check if the intersected object is an NPC to start a conversation.
                if (playerBounds.IntersectsWith(expandedBounds) && interactable is Npc)
                {
                    // Check if the player has already talked to this NPC.
                    if (talkedToList.Contains(interactable.InstanceName))
                    {
                        dialogLabel.Visible = true;
                        dialogBox.Visible = true;
                        dialogLabel.Text = "Sorry, nothing left to say.";
                        afterDialogTimer.Start();
                        // Special case for the "Weird man" after the first talk.
                        if (interactable.InstanceName == "Weird man")
                        {
                            player.AddItem(new Knife("Knife", "A basic knife.", 3, 4));
                            UpdateInventoryList();
                        }
                        return;
                    }
                    else
                    {
                        // Start a new conversation.
                        isInConversation = true;
                        ResetPlayerMovement();
                        StartConversationWith(interactable.InstanceName, diaLoad);
                        break;
                    }
                }

                // Handle interaction with other houses (an extension point for future features).
                if (playerBounds.IntersectsWith(expandedBounds) && interactable is Houses && interactable.InstanceName != "Your House")
                {
                    //extension: somehow interact with other houses -> maybe stealing, introduce karma system for kills and stolen goods
                }
            }
        }

        /// <summary>
        /// Starts a conversation with a specified NPC.
        /// </summary>
        /// <param name="NpcName">The instance name of the NPC to talk to.</param>
        /// <param name="dl">The DialogLoader instance containing dialog data.</param>
        private void StartConversationWith(string NpcName, DialogLoader dl)
        {
            if (dl.Dialogs == null)
            {
                // Handle the case where dialogs haven't loaded yet.
                dialogLabel.Visible = true;
                dialogBox.Visible = true;
                dialogLabel.Text = "Dialog error: Dialogs are not loaded.";
                afterDialogTimer.Start();
                isInConversation = false;
                return;
            }

            // Get the first dialog node (the "intro" node) for the NPC.
            DialogNode introNode = dl.GetDialogNode(NpcName, "intro");
            if (introNode != null)
            {
                // Display the introductory dialog.
                DisplayDialog(NpcName, introNode);
            }
            else
            {
                // Handle the case where no intro dialog is found.
                dialogLabel.Visible = true;
                dialogBox.Visible = true;
                dialogLabel.Text = $"Cannot find dialog for {NpcName}.";
                afterDialogTimer.Start();
                isInConversation = false;
            }
        }

        /// <summary>
        /// Displays a specific dialog node and its choices in the UI.
        /// </summary>
        /// <param name="NpcName">The name of the NPC for context.</param>
        /// <param name="node">The DialogNode to display.</param>
        private void DisplayDialog(string NpcName, DialogNode node)
        {
            dialogBox.Visible = true;
            dialogLabel.Visible = true;
            dialogLabel.Text = node.Text;

            // Clear any old choice buttons from the form.
            foreach (var button in choiceButtons)
            {
                this.Controls.Remove(button);
            }
            choiceButtons.Clear();

            int yPosition = dialogLabel.Bottom + 10;
            int choice_number = 1;

            // Create buttons for each dialog choice.
            if (node.Choices != null)
            {
                foreach (var choice in node.Choices)
                {
                    Button choiceButton = new Button();
                    choiceButton.Text = choice_number++ + ") " + choice.Value.Text;
                    choiceButton.Location = new Point(dialogLabel.Left, yPosition);
                    choiceButton.AutoSize = true;
                    choiceButton.Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
                    // Use a lambda expression to handle the button click and pass the next node's ID.
                    choiceButton.Click += (sender, args) => OnChoiceSelected(NpcName, choice.Value.Next);
                    this.Controls.Add(choiceButton);
                    choiceButtons.Add(choiceButton);
                    choiceButton.BringToFront();
                    yPosition += choiceButton.Height + 5;
                }
            }

            // Add an "End Conversation" button.
            Button endButton = new Button();
            endButton.Text = "---- End Conversation";
            endButton.Location = new Point(dialogLabel.Left, yPosition);
            endButton.AutoSize = true;
            endButton.Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
            endButton.Click += (sender, args) => EndConversation();
            this.Controls.Add(endButton);
            choiceButtons.Add(endButton);
            endButton.BringToFront();

            // Add the NPC to the list of talked-to NPCs if they aren't already there.
            if (!talkedToList.Contains(NpcName))
            {
                talkedToList.Add(NpcName);
            }
        }

        /// <summary>
        /// Handles the event when a dialog choice button is selected.
        /// </summary>
        /// <param name="NpcName">The name of the NPC.</param>
        /// <param name="nextNodeId">The ID of the next dialog node to display.</param>
        private void OnChoiceSelected(string NpcName, string nextNodeId)
        {
            if (!string.IsNullOrEmpty(nextNodeId))
            {
                DialogNode nextNode = diaLoad.GetDialogNode(NpcName, nextNodeId);
                if (nextNode != null)
                {
                    // If a valid next node exists, display it.
                    DisplayDialog(NpcName, nextNode);
                }
                else
                {
                    // Handle a missing dialog node.
                    dialogLabel.Text = "Dialog error: The next node does not exist.";
                }
            }
            else
            {
                // If there is no next node, end the conversation.
                EndConversation();
            }
        }

        /// <summary>
        /// Ends the current conversation and hides all dialog-related UI elements.
        /// </summary>
        private void EndConversation()
        {
            dialogLabel.Visible = false;
            // Remove all choice buttons from the form.
            foreach (var button in choiceButtons)
            {
                this.Controls.Remove(button);
            }
            choiceButtons.Clear();

            // Reset the conversation state flags.
            isInConversation = false;
            Core.IsInteracting = false;

            // Clear the dialog text and hide the dialog box.
            dialogLabel.Text = "";
            dialogBox.Visible = false;
        }

        /// <summary>
        /// Resets the player's movement flags to ensure they stop moving during a dialog.
        /// </summary>
        private void ResetPlayerMovement()
        {
            Core.IsUp = false;
            Core.IsDown = false;
            Core.IsLeft = false;
            Core.IsRight = false;
        }

        //inventory functions bellow
        /// <summary>
        /// Adds a game item to the player's inventory and updates the UI.
        /// </summary>
        /// <param name="item1">The item to add.</param>
        private void AddItemToPlayer(IIgameItem item1)
        {
            cPlayer1.AddItem(item1);
            UpdateInventoryList();
        }

        /// <summary>
        /// Updates the text displayed in the inventory label based on the player's current inventory.
        /// </summary>
        private void UpdateInventoryList()
        {
            StringBuilder inventoryText = new StringBuilder();

            inventoryText.AppendLine("Your inventory: (click to close)");

            // Append each item's name and description to the display text.
            foreach (var item in cPlayer1.Inventory)
            {
                inventoryText.AppendLine($"{item.Name} - {item.Description}");
            }

            playInventory.Text = inventoryText.ToString();
        }

        /// <summary>
        /// Handles the transition to the next scene (the EndOfDay form).
        /// </summary>
        private void TransitionToEndOfDay()
        {
            this.Hide();
            EndOfDay newScene = new EndOfDay(cPlayer1);
            newScene.Show();
        }

        /// <summary>
        /// Event handler for the collision timer's tick event.
        /// </summary>
        private void CollisionTimer_Tick(object sender, EventArgs e)
        {
            CheckCollision();
        }

        /// <summary>
        /// Event handler for the after-dialog timer, which hides the dialog box after a delay.
        /// </summary>
        private void DialogTimer_Tick(object sender, EventArgs e)
        {
            dialogLabel.Visible = false;
            dialogBox.Visible = false;
            afterDialogTimer.Stop();
        }

        /// <summary>
        /// Event handler for the end-of-day timer, which automatically transitions to the next scene.
        /// </summary>
        private void EndOfDay_Tick(object sender, EventArgs e)
        {
            TransitionToEndOfDay();
        }

        /// <summary>
        /// Handles the event when the inventory label is clicked, hiding it.
        /// </summary>
        private void PlayInventory_Click(object sender, EventArgs e)
        {
            playInventory.Visible = false;
        }

        /// <summary>
        /// Handles the FormClosing event to stop all timers and clean up resources.
        /// </summary>
        private void NextDay_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Stop the 5-minute end-of-day timer.
            if (endOfDayTimer != null)
            {
                endOfDayTimer.Stop();
                endOfDayTimer.Dispose();
                endOfDayTimer = null; // Set to null to indicate it's disposed.
            }

            // Stop the after-dialog timer.
            if (afterDialogTimer != null)
            {
                afterDialogTimer.Stop();
                afterDialogTimer.Dispose();
                afterDialogTimer = null;
            }

            // Stop the collision timer.
            if (collisionTimer != null)
            {
                collisionTimer.Stop();
                collisionTimer.Dispose();
                collisionTimer = null;
            }
        }
    }
}