using System;
using System.Drawing;
using System.Windows.Forms;
using System.Threading.Tasks; // Required for Task
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Numerics;


namespace MistsOfThelema
{
    /// <summary>
    /// Represents the main game form for the FIRST DAY ONLY.
    /// It manages player movement, collisions, interactions and dialogs.
    /// </summary>
    public partial class FirstDay : Form
    {
        // --- UI Controls ---
        private Label interactLabel;
        private Label dialogLabel;
        private Label playInventory;

        private PictureBox pictureBox1;
        private PictureBox dialogBox;

        // --- Timers ---
        private Timer collisionTimer;
        private Timer afterDialogTimer;

        // --- Game Entities (NPCs and interactables) ---
        private Npc npc1;
        private Npc weirdMan;
        private Npc shopkeeper;

        private Houses playerExitHouse;

        private CPlayer cPlayer1;

        // --- Game State and Collections ---
        private List<string> talkedToList = new List<string>();
        private List<Button> choiceButtons = new List<Button>();
        private List<IInteractable> interactables;

        private DialogLoader diaLoad;

        private System.ComponentModel.IContainer components;

        private bool isInConversation = false;

        /// <summary>
        /// Initializes a new instance of the <see cref="FirstDay"/> form.
        /// This constructor sets up the game environment, including UI components,
        /// timers, interactable objects, and dialog loading.
        /// </summary>
        public FirstDay()
        {
            // Initialize the form's components generated by the designer.
            InitializeComponent();

            // --- Step 1: Initialize the DialogLoader ---
            // The DialogLoader is responsible for loading conversation data from a JSON file.
            diaLoad = new DialogLoader();

            // --- Step 2: Subscribe to the DialogsLoaded event ---
            // This event handler is called when the dialog loading process completes,
            // whether it succeeds or fails.
            diaLoad.DialogsLoaded += OnDialogsLoaded;

            // --- Step 3: Start asynchronous dialog loading ---
            // We use an asynchronous method to load the dialogs in the background,
            // preventing the UI from freezing. The '_' discards the Task, as we
            // handle the result via the event handler.
            string dialogFile = $"resources\\dialog\\day{GameManager.CurrentDay}.json";
            _ = diaLoad.LoadDialogsFromJsonAsync(dialogFile);

            // Initialize the list of interactable objects in the scene.
            InitializeInteractables();

            // Initialize lists for managing conversation state.
            choiceButtons = new List<Button>();
            talkedToList = new List<string>();

            // --- Initialize Timers ---
            // afterDialogTimer: Used to automatically hide the dialog box after a short delay.
            afterDialogTimer = new Timer
            {
                Interval = 2000 // 2 seconds
            };
            afterDialogTimer.Tick += DialogTimer_Tick;

            // Assign instance names to the interactable objects.
            npc1.InstanceName = "Theo";
            weirdMan.InstanceName = "Weird man";
            playerExitHouse.InstanceName = "Your House";
            shopkeeper.InstanceName = "Shopkeeper";

            // Give the player their starting inventory items.
            PlayerStarterInventory(cPlayer1);
            UpdateInventoryList();

            this.FormClosing += FirstDay_FormClosing;
        }

        /// <summary>
        /// Initializes the form's components. This method is auto-generated by the designer.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FirstDay));
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            this.interactLabel = new System.Windows.Forms.Label();
            this.collisionTimer = new System.Windows.Forms.Timer(this.components);
            this.dialogLabel = new System.Windows.Forms.Label();
            this.dialogBox = new System.Windows.Forms.PictureBox();
            this.afterDialogTimer = new System.Windows.Forms.Timer(this.components);
            this.playInventory = new System.Windows.Forms.Label();
            this.shopkeeper = new MistsOfThelema.Npc();     // Initialize shopkeeper
            this.weirdMan = new MistsOfThelema.Npc();      // Initialize weirdMan
            this.cPlayer1 = new MistsOfThelema.CPlayer();  // Initialize cPlayer1
            this.npc1 = new MistsOfThelema.Npc();          // Initialize npc1
            this.playerExitHouse = new MistsOfThelema.Houses(); // Initialize playerExitHouse
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialogBox)).BeginInit();
            this.SuspendLayout();
            //
            // pictureBox1
            //
            this.pictureBox1.BackColor = System.Drawing.Color.Black;
            this.pictureBox1.InitialImage = global::MistsOfThelema.Properties.Resources.defPlayer;
            this.pictureBox1.Location = new System.Drawing.Point(194, 322);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(94, 130);
            this.pictureBox1.TabIndex = 1;
            this.pictureBox1.TabStop = false;
            //
            // interactLabel
            //
            this.interactLabel.AutoSize = true;
            this.interactLabel.BackColor = System.Drawing.SystemColors.ActiveCaptionText;
            this.interactLabel.Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
            this.interactLabel.ForeColor = System.Drawing.SystemColors.Control;
            this.interactLabel.Location = new System.Drawing.Point(526, 854);
            this.interactLabel.Name = "interactLabel";
            this.interactLabel.Size = new System.Drawing.Size(348, 18);
            this.interactLabel.TabIndex = 6;
            this.interactLabel.Text = "Interact with ------ by pressing E";
            this.interactLabel.Visible = false;
            //
            // collisionTimer
            //
            this.collisionTimer.Enabled = true;
            this.collisionTimer.Interval = 50;
            this.collisionTimer.Tick += new System.EventHandler(this.CollisionTimer_Tick);
            //
            // dialogLabel
            //
            this.dialogLabel.AutoSize = true;
            this.dialogLabel.BackColor = System.Drawing.Color.SeaGreen;
            this.dialogLabel.Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
            this.dialogLabel.ForeColor = System.Drawing.SystemColors.ButtonHighlight;
            this.dialogLabel.Location = new System.Drawing.Point(227, 889);
            this.dialogLabel.Name = "dialogLabel";
            this.dialogLabel.Size = new System.Drawing.Size(118, 18);
            this.dialogLabel.TabIndex = 9;
            this.dialogLabel.Text = "dialogLabel";
            this.dialogLabel.Visible = false;
            //
            // dialogBox
            //
            this.dialogBox.BackColor = System.Drawing.Color.Black;
            this.dialogBox.Location = new System.Drawing.Point(-5, 875);
            this.dialogBox.Name = "dialogBox";
            this.dialogBox.Size = new System.Drawing.Size(1439, 227);
            this.dialogBox.TabIndex = 11;
            this.dialogBox.TabStop = false;
            this.dialogBox.Visible = false;
            //
            // playInventory
            //
            this.playInventory.AutoSize = true;
            this.playInventory.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(192)))), ((int)(((byte)(0)))));
            this.playInventory.Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
            this.playInventory.Location = new System.Drawing.Point(696, 152);
            this.playInventory.Name = "playInventory";
            this.playInventory.Size = new System.Drawing.Size(178, 18);
            this.playInventory.TabIndex = 14;
            this.playInventory.Text = "PLAYER INVENTORY:";
            this.playInventory.Click += new System.EventHandler(this.PlayInventory_Click);
            this.playInventory.Visible = false;
            //
            // shopkeeper
            //
            this.shopkeeper.BackColor = System.Drawing.Color.Transparent;
            this.shopkeeper.InstanceName = "Shopkeeper";
            this.shopkeeper.Location = new System.Drawing.Point(602, 703);
            this.shopkeeper.Name = "shopkeeper";
            this.shopkeeper.Size = new System.Drawing.Size(70, 88);
            this.shopkeeper.TabIndex = 13;
            //
            // weirdMan
            //
            this.weirdMan.BackColor = System.Drawing.Color.Transparent;
            this.weirdMan.InstanceName = null;
            this.weirdMan.Location = new System.Drawing.Point(207, 364);
            this.weirdMan.Name = "weirdMan";
            this.weirdMan.Size = new System.Drawing.Size(70, 88);
            this.weirdMan.TabIndex = 12;
            //
            // cPlayer1
            //
            this.cPlayer1.BackColor = System.Drawing.Color.Transparent;
            this.cPlayer1.Location = new System.Drawing.Point(34, 841);
            this.cPlayer1.Name = "cPlayer1";
            this.cPlayer1.Size = new System.Drawing.Size(61, 86);
            this.cPlayer1.TabIndex = 0;
            this.cPlayer1.KeyDown += new System.Windows.Forms.KeyEventHandler(this.OnKeyDown);
            this.cPlayer1.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.OnKeyPress);
            this.cPlayer1.KeyUp += new System.Windows.Forms.KeyEventHandler(this.OnKeyUp);
            //
            // npc1
            //
            this.npc1.BackColor = System.Drawing.Color.Transparent;
            this.npc1.InstanceName = "Theo";
            this.npc1.Location = new System.Drawing.Point(986, 523);
            this.npc1.Name = "npc1";
            this.npc1.Size = new System.Drawing.Size(70, 88);
            this.npc1.TabIndex = 4;
            //
            // playerExitHouse
            //
            this.playerExitHouse.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowAndShrink;
            this.playerExitHouse.BackColor = System.Drawing.Color.Transparent;
            this.playerExitHouse.InstanceName = "Your House";
            this.playerExitHouse.Location = new System.Drawing.Point(1131, 292);
            this.playerExitHouse.Name = "playerExitHouse";
            this.playerExitHouse.Size = new System.Drawing.Size(225, 109);
            this.playerExitHouse.TabIndex = 5;
            //
            // Scene1
            //
            this.BackColor = System.Drawing.SystemColors.ActiveBorder;
            this.BackgroundImage = global::MistsOfThelema.Properties.Resources.townProto;
            this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Center;
            this.ClientSize = new System.Drawing.Size(1424, 1041);
            this.Controls.Add(this.playInventory);
            this.Controls.Add(this.shopkeeper);
            this.Controls.Add(this.weirdMan);
            this.Controls.Add(this.dialogLabel);
            this.Controls.Add(this.interactLabel);
            this.Controls.Add(this.cPlayer1);
            this.Controls.Add(this.npc1);
            this.Controls.Add(this.pictureBox1);
            this.Controls.Add(this.playerExitHouse);
            this.Controls.Add(this.dialogBox);
            this.Cursor = System.Windows.Forms.Cursors.Cross;
            this.DoubleBuffered = true;
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximumSize = new System.Drawing.Size(1440, 1080);
            this.MinimumSize = new System.Drawing.Size(1440, 1038);
            this.Name = "Scene1";
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dialogBox)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        /// <summary>
        /// Handles the DialogsLoaded event from the DialogLoader.
        /// This method is invoked when the asynchronous dialog loading is complete.
        /// It checks the result and updates the UI accordingly.
        /// </summary>
        /// <param name="success">True if dialogs were loaded successfully; otherwise, false.</param>
        /// <param name="errorMessage">An error message if loading failed, or null if successful.</param>
        private void OnDialogsLoaded(bool success, string errorMessage)
        {
            // This check is crucial for thread safety. If the method is called from a non-UI thread,
            // we use Invoke to marshal the call to the UI thread.
            if (this.InvokeRequired)
            {
                this.Invoke(new DialogLoader.DialogsLoadedEventHandler(OnDialogsLoaded), new object[] { success, errorMessage });
                return;
            }

            // The code below will always run on the UI thread after the Invoke call.
            if (success)
            {
                // Dialogs were successfully loaded. You could show a debug message here if needed.
                // MessageBox.Show("Dialogs were successfully loaded!", "Loading Complete", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                // An error occurred while loading dialogs. Display an error message and exit the application.
                MessageBox.Show($"Dialog Error: {errorMessage}\nError Loading Dialog", "Dialog Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
            }
        }


        /// <summary>
        /// Initializes the list of interactable objects in the game world.
        /// </summary>
        private void InitializeInteractables()
        {
            // Make sure the objects (playerExitHouse, npc1, weirdMan, shopkeeper) are initialized
            // before adding them to the list.
            interactables = new List<IInteractable>
      {
        playerExitHouse,
        npc1,
        weirdMan,
        shopkeeper
      };
        }

        /// <summary>
        /// Handles key-down events for player movement and interaction.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="KeyEventArgs"/> that contains the event data.</param>
        private void OnKeyDown(object sender, KeyEventArgs e)
        {
            // Prevent movement and interaction if a conversation is active.
            if (isInConversation) return;

            // Set movement flags based on the pressed key.
            if (e.KeyCode == Core.KeyUp)
                Core.IsUp = true;
            if (e.KeyCode == Core.KeyDown)
                Core.IsDown = true;
            if (e.KeyCode == Core.KeyLeft)
                Core.IsLeft = true;
            if (e.KeyCode == Core.KeyRight)
                Core.IsRight = true;

            // Handle interaction key press ('E').
            if (e.KeyCode == Core.Interact)
            {
                Core.IsInteracting = true;
                HandleInteraction(cPlayer1);
            }

            // Toggle inventory visibility.
            if (e.KeyCode == Core.Inventory)
            {
                playInventory.Visible = true;
            }
        }

        /// <summary>
        /// Handles key-up events, resetting movement and interaction flags.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="KeyEventArgs"/> that contains the event data.</param>
        private void OnKeyUp(object sender, KeyEventArgs e)
        {
            // Ignore key releases during a conversation to prevent accidental movement.
            if (isInConversation) return;

            // Reset movement flags when a key is released.
            if (e.KeyCode == Core.KeyUp)
                Core.IsUp = false;
            if (e.KeyCode == Core.KeyDown)
                Core.IsDown = false;
            if (e.KeyCode == Core.KeyLeft)
                Core.IsLeft = false;
            if (e.KeyCode == Core.KeyRight)
                Core.IsRight = false;

            // Reset interaction flag when the interaction key is released.
            if (e.KeyCode == Core.Interact)
            {
                Core.IsInteracting = false;
            }
        }

        /// <summary>
        /// Handles key-press events. Currently unused but kept for potential future use.
        /// </summary>
        private void OnKeyPress(object sender, KeyPressEventArgs e)
        {
            // This method is intentionally left blank.
        }

        /// <summary>
        /// Checks for collisions between the player and interactable objects.
        /// Displays an interaction prompt if a collision is detected.
        /// </summary>
        private void CheckCollision()
        {
            bool collision = false;

            // Iterate through all interactable objects in the scene.
            foreach (var interactable in interactables)
            {
                Rectangle playerBounds = cPlayer1.GetBounds();
                Rectangle interactableBounds = interactable.GetBounds();

                // Expand the interactable's bounds to create a "proximity" radius for interaction.
                Rectangle expandedBounds = ExpandBoundsByRadius(interactableBounds, 30);

                // Check if the player's bounds intersect with the expanded interactable bounds.
                if (playerBounds.IntersectsWith(expandedBounds))
                {
                    interactLabel.Visible = true;
                    collision = true; // A collision is detected.

                    // Customize the interaction message based on the object.
                    if (interactable.InstanceName == "Your House")
                    {
                        interactLabel.Text = $"Press E to END THE DAY by entering {interactable.InstanceName}";
                    }
                    else
                    {
                        interactLabel.Text = $"Press E to interact with {interactable.InstanceName}";
                    }
                    break; // Exit the loop once a collision is found.
                }
            }
            // If no collision was detected after checking all interactables, hide the label.
            if (!collision)
            {
                interactLabel.Visible = false;
            }
        }

        /// <summary>
        /// Expands the given rectangle's bounds by a specified radius.
        /// This is used to create a larger interaction area around objects.
        /// </summary>
        /// <param name="bounds">The original rectangle to expand.</param>
        /// <param name="radius">The amount to expand the bounds by on each side.</param>
        /// <returns>The new, expanded rectangle.</returns>
        private Rectangle ExpandBoundsByRadius(Rectangle bounds, int radius)
        {
            return new Rectangle(
              bounds.X - radius,
              bounds.Y - radius,
              bounds.Width + 2 * radius,
              bounds.Height + 2 * radius
            );
        }

        /// <summary>
        /// Handles the interaction logic when the player presses the interact key.
        /// </summary>
        /// <param name="player">The player object.</param>
        private void HandleInteraction(CPlayer player)
        {
            // Iterate through all interactable objects to check for a collision on interaction.
            foreach (var interactable in interactables)
            {
                Rectangle playerBounds = cPlayer1.GetBounds();
                Rectangle interactableBounds = interactable.GetBounds();

                // Use a slightly larger radius for interaction than for the collision prompt.
                Rectangle expandedBounds = ExpandBoundsByRadius(interactableBounds, 50);

                // Check for intersection and handle the specific interaction logic.
                if (playerBounds.IntersectsWith(expandedBounds))
                {
                    // Handle interaction with "Your House" to end the day.
                    if (interactable.InstanceName == "Your House")
                    {
                        TransitionToEndOfDay();
                        break;
                    }

                    // Check if the intersected object is an NPC to start a conversation.
                    if (interactable is Npc)
                    {
                        // Prevent repeating the same conversation on the same day.
                        if (talkedToList.Contains(interactable.InstanceName))
                        {
                            // Display a message that there's nothing new to say.
                            dialogLabel.Visible = true;
                            dialogBox.Visible = true;
                            dialogLabel.Text = "Sorry, nothing left to say.";
                            afterDialogTimer.Start();

                            // Grant a secret item after talking to the "Weird man" for the second time.
                            if (interactable.InstanceName == "Weird man")
                            {
                                player.AddItem(new Knife("Knife", "A basic knife.", 3, 4));
                                UpdateInventoryList();
                            }
                            return; // Exit the method after handling the repeated interaction.
                        }
                        else
                        {
                            // If this is the first time talking to the NPC, start the conversation.
                            isInConversation = true;
                            ResetPlayerMovement();

                            StartConversationWith(interactable.InstanceName, diaLoad);
                            break;
                        }
                    }

                    // Handle interaction with other houses (not "Your House").
                    if (interactable is Houses && interactable.InstanceName != "Your House")
                    {
                        // For future extensions: implement logic for entering or interacting with other houses.
                        // For now, just a placeholder to show a locked message.
                        dialogLabel.Visible = true;
                        dialogBox.Visible = true;
                        dialogLabel.Text = "Seems locked.";
                        afterDialogTimer.Start();
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// Initiates a conversation with a specified NPC.
        /// </summary>
        /// <param name="NpcName">The instance name of the NPC to talk to.</param>
        /// <param name="dl">The <see cref="DialogLoader"/> instance.</param>
        private void StartConversationWith(string NpcName, DialogLoader dl)
        {
            // Check if the dialogs have been loaded successfully before proceeding.
            if (dl.Dialogs == null)
            {
                // Display an error message if dialogs are not available.
                dialogLabel.Visible = true;
                dialogBox.Visible = true;
                dialogLabel.Text = "Dialog error: Dialogs not loaded.";
                afterDialogTimer.Start();
                isInConversation = false; // Allow player movement again.
                return;
            }

            // Get the starting "intro" dialog node for the NPC.
            DialogNode introNode = dl.GetDialogNode(NpcName, "intro");
            if (introNode != null)
            {
                // Display the first dialog node.
                DisplayDialog(NpcName, introNode);
            }
            else
            {
                // If the "intro" node doesn't exist for the NPC, display a debug message.
                dialogLabel.Visible = true;
                dialogBox.Visible = true;
                dialogLabel.Text = $"Cannot find dialog for {NpcName}.";
                afterDialogTimer.Start();
                isInConversation = false;
            }
        }

        /// <summary>
        /// Displays a dialog node's text and its corresponding choices as buttons.
        /// </summary>
        /// <param name="NpcName">The instance name of the NPC.</param>
        /// <param name="node">The <see cref="DialogNode"/> to display.</param>
        private void DisplayDialog(string NpcName, DialogNode node)
        {
            // Show the dialog box and label.
            dialogBox.Visible = true;
            dialogLabel.Visible = true;
            dialogLabel.Text = node.Text;

            // Clear any existing choice buttons from the form.
            foreach (var button in choiceButtons)
            {
                this.Controls.Remove(button);
            }
            choiceButtons.Clear();

            // Calculate the starting Y position for the choice buttons.
            int yPosition = dialogLabel.Bottom + 10;
            int choice_number = 1; // Used for numbering the choices.

            // Check if the dialog node has choices.
            if (node.Choices != null)
            {
                // Iterate through each choice and create a button for it.
                foreach (var choice in node.Choices)
                {
                    Button choiceButton = new Button
                    {
                        Text = choice_number++ + ") " + choice.Value.Text,
                        Location = new Point(dialogLabel.Left, yPosition),
                        AutoSize = true,
                        Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)))
                    };
                    // Attach an event handler to the button's Click event.
                    choiceButton.Click += (sender, args) => OnChoiceSelected(NpcName, choice.Value.Next);
                    this.Controls.Add(choiceButton);
                    choiceButtons.Add(choiceButton);
                    choiceButton.BringToFront(); // Ensure buttons are visible on top of other controls.
                    yPosition += choiceButton.Height + 5; // Move down for the next button.
                }
            }


            // Create a button to manually end the conversation.
            Button endButton = new Button
            {
                Text = "---- End Conversation",
                Location = new Point(dialogLabel.Left, yPosition),
                AutoSize = true,
                Font = new System.Drawing.Font("Courier New", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)))
            };
            endButton.Click += (sender, args) => EndConversation();
            this.Controls.Add(endButton);
            choiceButtons.Add(endButton);
            endButton.BringToFront();

            // Add the NPC to the list of talked-to NPCs to prevent repeating the full conversation.
            if (!talkedToList.Contains(NpcName))
            {
                talkedToList.Add(NpcName);
            }
        }

        /// <summary>
        /// Handles the selection of a dialog choice.
        /// </summary>
        /// <param name="NpcName">The instance name of the NPC.</param>
        /// <param name="nextNodeId">The ID of the next dialog node to display.</param>
        private void OnChoiceSelected(string NpcName, string nextNodeId)
        {
            // Check if a next node is specified.
            if (!string.IsNullOrEmpty(nextNodeId))
            {
                // Retrieve the next dialog node from the DialogLoader.
                DialogNode nextNode = diaLoad.GetDialogNode(NpcName, nextNodeId);
                if (nextNode != null)
                {
                    // Display the new dialog node.
                    DisplayDialog(NpcName, nextNode);
                }
                else
                {
                    // Display an error if the specified node doesn't exist.
                    dialogLabel.Text = "Dialog error: Next node does not exist.";
                    EndConversation(); // End the conversation to prevent being stuck.
                }
            }
            else
            {
                // If nextNodeId is empty, it signifies the end of the dialog branch.
                EndConversation();
            }
        }

        /// <summary>
        /// Ends the current conversation, hiding the dialog box and choice buttons.
        /// </summary>
        private void EndConversation()
        {
            // Hide the dialog UI elements.
            dialogLabel.Visible = false;
            dialogBox.Visible = false;
            dialogLabel.Text = "";

            // Remove and clear all the dynamically created choice buttons.
            foreach (var button in choiceButtons)
            {
                this.Controls.Remove(button);
            }
            choiceButtons.Clear();

            // Reset the conversation state to allow player movement again.
            isInConversation = false;
            Core.IsInteracting = false;
        }

        /// <summary>
        /// Resets the player's movement flags to stop all movement.
        /// This is called when a conversation starts.
        /// </summary>
        private void ResetPlayerMovement()
        {
            Core.IsUp = false;
            Core.IsDown = false;
            Core.IsLeft = false;
            Core.IsRight = false;
        }

        /// <summary>
        /// Updates the text of the inventory label to display the player's current items.
        /// </summary>
        private void UpdateInventoryList()
        {
            StringBuilder inventoryText = new StringBuilder();

            inventoryText.AppendLine("Your inventory: (click to close)");

            // Append each item's name and description to the inventory text.
            foreach (var item in cPlayer1.Inventory)
            {
                inventoryText.AppendLine($"{item.Name} - {item.Description}");
            }

            playInventory.Text = inventoryText.ToString();
        }

        /// <summary>
        /// Adds the starting items to the player's inventory at the beginning of the game.
        /// </summary>
        /// <param name="player">The player object.</param>
        private void PlayerStarterInventory(CPlayer player)
        {
            // Create instances of starter items.
            var coin = new Coin("Coin", "A shiny gold coin.", 1, 10, 1);
            var apple = new Apple("Apple", "Restores full health.", 2, 100, 1);

            // Add the items to the player's inventory.
            player.AddItem(coin);
            player.AddItem(apple);
        }

        /// <summary>
        /// Transitions the game from the current scene to the end-of-day scene.
        /// </summary>
        private void TransitionToEndOfDay()
        {
            this.Hide(); // Hide the current form.
            EndOfDay newScene = new EndOfDay(cPlayer1); // Create a new instance of the next scene.
            newScene.Show(); // Show the new scene.
            // newScene.ShowDialog(); // Uncomment for a modal dialog, if needed.
            // this.Show(); // Uncomment to show the current form again after the next scene is closed.
        }

        /// <summary>
        /// Event handler for the collision timer's Tick event.
        /// It periodically checks for player-interactable collisions.
        /// </summary>
        private void CollisionTimer_Tick(object sender, EventArgs e)
        {
            CheckCollision();
        }

        /// <summary>
        /// Event handler for the after-dialog timer's Tick event.
        /// It hides the dialog UI elements after a short delay.
        /// </summary>
        private void DialogTimer_Tick(object sender, EventArgs e)
        {
            dialogLabel.Visible = false;
            dialogBox.Visible = false;
            afterDialogTimer.Stop(); // Stop the timer so it doesn't fire again.
        }

        /// <summary>
        /// Event handler for the end-of-day timer's Tick event.
        /// It triggers the transition to the next scene when the day ends.
        /// </summary>
        private void EndOfDay_Tick(object sender, EventArgs e)
        {
            TransitionToEndOfDay();
        }

        /// <summary>
        /// Event handler for a label's click event. Currently unused.
        /// </summary>
        private void Label1_Click_1(object sender, EventArgs e)
        {
            // This method is intentionally left blank.
        }

        /// <summary>
        /// Event handler for the inventory label's click event.
        /// It hides the inventory display when clicked.
        /// </summary>
        private void PlayInventory_Click(object sender, EventArgs e)
        {
            playInventory.Visible = false;
        }

        /// <summary>
        /// Handles the FormClosing event to stop all timers and clean up resources.
        /// </summary>
        private void FirstDay_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Stop the after-dialog timer.
            if (afterDialogTimer != null)
            {
                afterDialogTimer.Stop();
                afterDialogTimer.Dispose();
                afterDialogTimer = null;
            }

            // Stop the collision timer.
            if (collisionTimer != null)
            {
                collisionTimer.Stop();
                collisionTimer.Dispose();
                collisionTimer = null;
            }
        }
    }
}